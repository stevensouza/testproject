<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

  <groupId>com.stevesouza</groupId>
  <artifactId>aspectj_compiletime</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>aspectj_compiletime</name>
    <description>Generates an aspectj library for use in other projects.  Also generates a woven class to
        test MessageCommunicator
    </description>
  <url>http://maven.apache.org</url>

  <properties>
<!--      according to AI this sets the maven compiler for source and target which is separate from-->
<!--      the 'complianceLevel' in ajc tells ajc to use 21 (need to research)-->
      <maven.compiler.source>17</maven.compiler.source>
      <maven.compiler.target>17</maven.compiler.target>

      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <!-- note for aspectj compiling above 1.5 i found some errors if the pointcut let everything be monitored -->
<!--      <jdk.version>1.8</jdk.version>-->
<!--      <jamonapi.version>2.81</jamonapi.version>-->
      <assertj.version>1.7.0</assertj.version>
      <aspectj.version>1.9.22.1</aspectj.version>
      <junit.version>4.13.1</junit.version>
      <mojo.execution.version>3.3.0</mojo.execution.version>
      <log4j.version>2.23.1</log4j.version>
      <slf4j.version>2.0.16</slf4j.version>
      <jackson.version>2.17.2</jackson.version>
      <micrometer.version>1.13.2</micrometer.version>
      <opentelemetry.annotation.version>2.8.0</opentelemetry.annotation.version>
  </properties>

    <build>
        <plugins>
            <!-- plugin used to compile aspectj using maven https://github.com/dev-aspectj/aspectj-maven-plugin?tab=readme-ov-file -->
            <plugin>
                <groupId>dev.aspectj</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
                <version>1.14</version>
                <dependencies>
                    <dependency>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjtools</artifactId>
                        <!-- AspectJ compiler version, in sync with runtime -->
                        <version>${aspectj.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <!-- see this link for options in configuring AJC (aspectj compiler) via this plugin https://dev-aspectj.github.io/aspectj-maven-plugin/compile-mojo.html-->
                    <!-- Your favourite Java source/target version -->
                    <complianceLevel>17</complianceLevel>
                    <outxml>true</outxml>
                    <showWeaveInfo>true</showWeaveInfo>
<!--                    <parameters>-->
<!--                     true-->
<!--                    </parameters>-->
<!--                    <additionalCompilerArgs>-->
<!--                        <arg>-parameters</arg>-->
<!--                        <arg>-g</arg>-->
<!--                    </additionalCompilerArgs>-->
                </configuration>
            </plugin>


<!--            <plugin>-->
<!--                <groupId>org.codehaus.mojo</groupId>-->
<!--                <artifactId>aspectj-maven-plugin</artifactId>-->
<!--                <version>${mojo.ajc.version}</version>-->
<!--                <configuration>-->
<!--                    <source>${jdk.version}</source>-->
<!--                    <target>${jdk.version}</target>-->
<!--                    <complianceLevel>${jdk.version}</complianceLevel>-->
<!--                    &lt;!&ndash; generates META-INF/aop-ajc.xml file and puts it in jar.  Recommended for aspectj libraries. &ndash;&gt;-->
<!--                    <outxml>true</outxml>-->
<!--                </configuration>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <goals>-->
<!--                            <goal>compile</goal>       &lt;!&ndash; use this goal to weave constructor your main classes &ndash;&gt;-->
<!--                            &lt;!&ndash; <goal>test-compile</goal>  &ndash;&gt; &lt;!&ndash; use this goal to weave constructor your test classes &ndash;&gt;-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${mojo.execution.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>exec</goal>
                        </goals>

                    </execution>
                </executions>
                <configuration>
                    <!-- generates class path with constructor dependencies as well as generated class -->
                    <classpathScope>runtime</classpathScope>
                        <mainClass>com.stevesouza.aspectj.javastyle.context.MyClass</mainClass>
                </configuration>
            </plugin>
    <!-- The Surefire Plugin is used during the test phase of the build lifecycle to execute the unit tests of an application. -->
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-surefire-plugin</artifactId>-->
<!--                <version>2.18.1</version>-->
<!--            </plugin>-->
        </plugins>
    </build>

  <dependencies>

      <dependency>
          <groupId>org.aspectj</groupId>
          <artifactId>aspectjrt</artifactId>
          <version>${aspectj.version}</version>
      </dependency>

<!--      <dependency>-->
<!--          <groupId>com.jamonapi</groupId>-->
<!--          <artifactId>jamon</artifactId>-->
<!--          <version>${jamonapi.version}</version>-->
<!--      </dependency>-->

      <dependency>
          <groupId>io.micrometer</groupId>
          <artifactId>micrometer-core</artifactId>
          <version>${micrometer.version}</version>
      </dependency>

      <dependency>
          <groupId>io.opentelemetry.instrumentation</groupId>
          <artifactId>opentelemetry-instrumentation-annotations</artifactId>
          <version>${opentelemetry.annotation.version}</version>
      </dependency>

      <dependency>
          <groupId>org.apache.logging.log4j</groupId>
          <artifactId>log4j-core</artifactId>
          <version>${log4j.version}</version>
      </dependency>

      <dependency>
          <groupId>org.apache.logging.log4j</groupId>
          <artifactId>log4j-slf4j2-impl</artifactId>
          <version>${log4j.version}</version>
      </dependency>
      <dependency>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
          <version>${slf4j.version}</version>
      </dependency>
      <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-ext -->
<!--      NDC capabilities-->
      <dependency>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-ext</artifactId>
          <version>${slf4j.version}</version>
      </dependency>

<!--   Need only if you output log4j2 as json using JsonTemplateLayout-->
      <dependency>
          <groupId>org.apache.logging.log4j</groupId>
          <artifactId>log4j-layout-template-json</artifactId>
          <version>${log4j.version}</version>
      </dependency>


      <dependency>
          <groupId>org.assertj</groupId>
          <artifactId>assertj-core</artifactId>
          <version>${assertj.version}</version>
          <scope>test</scope>
      </dependency>

<!--     jackson used to convert a map to json, but not required unless you want to do that i.e.-->
<!--      not required for regular aspectj work.-->
      <dependency>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-databind</artifactId>
          <version>${jackson.version}</version>
      </dependency>

<!--      <dependency>-->
<!--          <groupId>pl.pragmatists</groupId>-->
<!--          <artifactId>JUnitParams</artifactId>-->
<!--          <version>1.0.2</version>-->
<!--          <scope>test</scope>-->
<!--      </dependency>-->

<!--      <dependency>-->
<!--          <groupId>org.mockito</groupId>-->
<!--          <artifactId>mockito-all</artifactId>-->
<!--          <version>1.9.5</version>-->
<!--          <scope>test</scope>-->
<!--      </dependency>-->

       <dependency>
         <groupId>junit</groupId>
         <artifactId>junit</artifactId>
         <version>${junit.version}</version>
         <scope>test</scope>
       </dependency>

<!--      <dependency>-->
<!--          <groupId>log4j</groupId>-->
<!--          <artifactId>log4j</artifactId>-->
<!--          <version>1.2.15</version>-->
<!--          <exclusions>-->
<!--              <exclusion>-->
<!--                  <groupId>com.sun.jdmk</groupId>-->
<!--                  <artifactId>jmxtools</artifactId>-->
<!--              </exclusion>-->
<!--              <exclusion>-->
<!--                  <groupId>com.sun.jmx</groupId>-->
<!--                  <artifactId>jmxri</artifactId>-->
<!--              </exclusion>-->
<!--              <exclusion>-->
<!--                  <groupId>javax.jms</groupId>-->
<!--                  <artifactId>jms</artifactId>-->
<!--              </exclusion>-->
<!--          </exclusions>-->
<!--      </dependency>-->

  </dependencies>
</project>
