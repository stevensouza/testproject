package com.stevesouza.jmx;import com.jamonapi.*;import java.util.*;/** * *This code does the following: *   - generates some representative monitors (using mock page names among other things). *   - it shows how to grab the monitors for further processing *   - it shows how to access data from individual monitors; * @author stevesouza */public class JAMonSampleCode {            // mock up page hits data by using this array    private String[] pages={"\\myapp\\home.jsp", "\\myapp\\login.jsp", "\\myapp\\logout.jsp", "\\myapp\\buy.jsp", "\\myapp\\sell.jsp", "\\myapp\\my.html"};    // strings for getting data out of jamon    private String[] jamonStats={    "lastValue",    "hits",    "avg",    "total",    "min",    "max",    "active",    "avgActive",    "maxActive",    "firstAccess",    "lastAccess"};        // sleep a specified amount of time    private void sleep(long period) {        try {           Thread.sleep(period);        } catch (Exception e) {        }            }        // sleep a random amount of time    private void sleepRandom() {       Random r=new Random();       sleep(r.nextInt(100));    }        // generate jamon time monitors that represent page hits in a web app.    public void generateTimerData() {        for (int i=0;i<5;i++)            for (int j=0;j<pages.length;j++) {              // start("//myapp//pagename.jsp");              Monitor m=MonitorFactory.start(pages[j]);              sleepRandom();              m.stop();            }    }        // call the jamon add method.  This represents say the number of bytes sent back via the web app.    public void generateAddData() {        Random r=new Random();        for (int i=0;i<10;i++)            MonitorFactory.add("bytes.sent","KB", r.nextInt(1000));    }        // get the monitors in an array and display their data using 2 ways.  One using hardcoded method names like getAvg()/getMin()/getMax(),    // and the other passing in a type string like 'avg'/'min'/'max' etc.    public void displayData() {        Monitor mon;        // show how to get a single monitor.  simply call its toString() method.        System.out.println("\nIndividually getting a Monitor requires using both label and units:");        mon=MonitorFactory.getMonitor(pages[0], "ms.");        // m.toString() example: JAMon Label=login.jsp, Units=ms.: (LastValue=65.0, Hits=5.0, Avg=39.4, Total=197.0, Min=1.0, Max=65.0, Active=0.0, Avg Active=1.0, Max Active=1.0, First Access=Thu Aug 25 16:28:55 BST 2011, Last Access=Thu Aug 25 16:28:57 BST 2011        System.out.println(mon);                // grab all monitors and display their contents using hardcoded methods like getAvg(), getMin() etc.        Monitor[] mons=MonitorFactory.getRootMonitor().getMonitors();        System.out.println("\nLoop through array displaying all monitors:");        for (int i=0;i<mons.length;i++) {            mon=mons[i];            String str=getMonString(mon);            System.out.println(str);        }                        // grab all monitors and display their contents using string like 'avg', 'min' etc.        // The end result is the same as the above code        System.out.println("\nAlternative method for displaying monitor data:");        for (int i=0;i<mons.length;i++) {            mon=mons[i];            String str=getMonStringWithType(mon);            System.out.println(str);        }    }                        private String getMonString(Monitor mon) {            String str="  label="+mon.getLabel()+            " ,units="+mon.getUnits()+            " ,lastValue="+mon.getLastValue()+            " ,hits="+mon.getHits()+            " ,avg="+mon.getAvg()+            " ,total="+mon.getTotal()+            " ,min="+mon.getMin()+            " ,max="+mon.getMax()+            " ,active="+mon.getActive()+            " ,avgActive"+mon.getAvgActive()+            " ,maxActive="+mon.getMaxActive()+            " ,firstAccess="+mon.getFirstAccess()+            " ,lastAccess="+mon.getLastAccess();                        return str;        }                // same result as getMonString above, just using a different approach.        private String getMonStringWithType(Monitor mon) {            String str="";            str+="  label="+mon.getLabel();            str+=", units="+mon.getUnits();                        for (int i=0;i<jamonStats.length;i++) {                str+=", "+jamonStats[i]+"="+mon.getValue(jamonStats[i]);                            }                        return str;        }                     public static void main(String[] args) {        System.out.println("Generating JAMon data");                JAMonSampleCode jamon=new JAMonSampleCode();        jamon.generateTimerData();        jamon.generateAddData();        jamon.displayData();            }    }
